<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/release.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/release.yml" />
              <option name="updatedContent" value="name: Build and Release APK&#10;&#10;on:&#10;  push:&#10;    tags:&#10;      - 'v*'  # Triggers on version tags like v1.0.0&#10;  workflow_dispatch:  # Allows manual triggering&#10;&#10;jobs:&#10;  build:&#10;    runs-on: ubuntu-latest&#10;    &#10;    steps:&#10;    - name: Checkout code&#10;      uses: actions/checkout@v4&#10;      &#10;    - name: Set up JDK 17&#10;      uses: actions/setup-java@v4&#10;      with:&#10;        java-version: '17'&#10;        distribution: 'temurin'&#10;        &#10;    - name: Cache Gradle packages&#10;      uses: actions/cache@v4&#10;      with:&#10;        path: |&#10;          ~/.gradle/caches&#10;          ~/.gradle/wrapper&#10;        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}&#10;        restore-keys: |&#10;          ${{ runner.os }}-gradle-&#10;          &#10;    - name: Make gradlew executable&#10;      run: chmod +x gradlew&#10;      &#10;    - name: Create local.properties&#10;      run: |&#10;        echo &quot;sdk.dir=$ANDROID_HOME&quot; &gt; local.properties&#10;        echo &quot;GOOGLE_DRIVE_CLIENT_ID=dummy_client_id_for_build&quot; &gt;&gt; local.properties&#10;        &#10;    - name: Build Release APK&#10;      run: ./gradlew assembleRelease&#10;      &#10;    - name: Sign APK&#10;      uses: r0adkll/sign-android-release@v1&#10;      id: sign_app&#10;      with:&#10;        releaseDirectory: app/build/outputs/apk/release&#10;        signingKeyBase64: ${{ secrets.SIGNING_KEY }}&#10;        alias: ${{ secrets.ALIAS }}&#10;        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}&#10;        keyPassword: ${{ secrets.KEY_PASSWORD }}&#10;      env:&#10;        BUILD_TOOLS_VERSION: &quot;34.0.0&quot;&#10;        &#10;    - name: Get release info&#10;      id: release_info&#10;      run: |&#10;        echo &quot;version_name=$(grep 'versionName' app/build.gradle.kts | cut -d'&quot;' -f2)&quot; &gt;&gt; $GITHUB_OUTPUT&#10;        echo &quot;version_code=$(grep 'versionCode' app/build.gradle.kts | grep -o '[0-9]*')&quot; &gt;&gt; $GITHUB_OUTPUT&#10;        &#10;    - name: Create Release&#10;      uses: softprops/action-gh-release@v1&#10;      with:&#10;        tag_name: ${{ github.ref_name }}&#10;        name: &quot;Vinyleaf Music Player v${{ steps.release_info.outputs.version_name }}&quot;&#10;        body: |&#10;          ##  Vinyleaf Music Player Release&#10;          &#10;          **Version:** ${{ steps.release_info.outputs.version_name }}&#10;          **Build:** ${{ steps.release_info.outputs.version_code }}&#10;          &#10;          ### What's New&#10;          - Latest features and improvements&#10;          - Bug fixes and performance enhancements&#10;          &#10;          ### Installation&#10;          Download the APK file below and install on your Android device.&#10;          &#10;          **Minimum Android Version:** 7.0 (API level 24)&#10;          &#10;        files: |&#10;          ${{ steps.sign_app.outputs.signedReleaseFile }}&#10;        draft: false&#10;        prerelease: false&#10;      env:&#10;        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# Built application files&#10;*.apk&#10;*.aar&#10;*.ap_&#10;*.aab&#10;&#10;# Files for the ART/Dalvik VM&#10;*.dex&#10;&#10;# Java class files&#10;*.class&#10;&#10;# Generated files&#10;bin/&#10;gen/&#10;out/&#10;&#10;# Gradle files&#10;.gradle/&#10;build/&#10;&#10;# Local configuration file (sdk path, etc)&#10;local.properties&#10;&#10;# Proguard folder generated by Eclipse&#10;proguard/&#10;&#10;# Log Files&#10;*.log&#10;&#10;# Android Studio Navigation editor temp files&#10;.navigation/&#10;&#10;# Android Studio captures folder&#10;captures/&#10;&#10;# IntelliJ&#10;*.iml&#10;.idea/workspace.xml&#10;.idea/tasks.xml&#10;.idea/gradle.xml&#10;.idea/assetWizardSettings.xml&#10;.idea/dictionaries&#10;.idea/libraries&#10;.idea/caches&#10;.idea/modules.xml&#10;.idea/navEditor.xml&#10;&#10;# Keystore files (NEVER commit these!)&#10;*.jks&#10;*.keystore&#10;&#10;# OS-specific files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# VS Code&#10;.vscode/&#10;&#10;# Temporary files&#10;*.tmp&#10;*.temp&#10;&#10;# Backup files&#10;*.bak&#10;*.swp&#10;*~" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="#  Vinyleaf - Android Music Player&#10;&#10;A modern Android music player app with Google Drive integration, built with Jetpack Compose and Material Design 3.&#10;&#10;##  Features&#10;&#10;- **Google Drive Integration**: Stream music directly from your Google Drive&#10;- **Modern UI**: Built with Jetpack Compose and Material Design 3&#10;- **Background Playback**: Continues playing music in the background&#10;- **Playlist Management**: Create and manage custom playlists&#10;- **Audio Formats**: Supports MP3, FLAC, WAV, AAC, OGG&#10;- **Dark/Light Theme**: Automatic theme switching&#10;&#10;## ️ Setup for Development&#10;&#10;### Prerequisites&#10;- Android Studio Flamingo or newer&#10;- JDK 17&#10;- Android SDK API 24+&#10;&#10;### Google Drive API Setup&#10;1. Go to [Google Cloud Console](https://console.cloud.google.com/)&#10;2. Create a new project or select existing one&#10;3. Enable Google Drive API&#10;4. Create OAuth 2.0 credentials for Android&#10;5. Add your app's SHA-1 fingerprint&#10;6. Copy the Client ID to `local.properties`:&#10;&#10;```properties&#10;GOOGLE_DRIVE_CLIENT_ID=your_actual_client_id_here.apps.googleusercontent.com&#10;```&#10;&#10;### Building the App&#10;&#10;#### Debug Build&#10;```bash&#10;./gradlew assembleDebug&#10;```&#10;&#10;#### Release Build&#10;```bash&#10;./gradlew assembleRelease&#10;```&#10;&#10;##  Release Process&#10;&#10;### Automatic Releases via GitHub Actions&#10;&#10;This project is configured for automatic APK generation on GitHub releases:&#10;&#10;1. **Create a signed keystore** (one-time setup):&#10;   ```bash&#10;   keytool -genkey -v -keystore release-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias vinyleaf&#10;   ```&#10;&#10;2. **Add GitHub Secrets** in your repository settings:&#10;   - `SIGNING_KEY`: Base64 encoded keystore file&#10;   - `ALIAS`: Your keystore alias (e.g., &quot;vinyleaf&quot;)&#10;   - `KEY_STORE_PASSWORD`: Keystore password&#10;   - `KEY_PASSWORD`: Key password&#10;&#10;3. **Create a release**:&#10;   ```bash&#10;   git tag v1.0.0&#10;   git push origin v1.0.0&#10;   ```&#10;&#10;   Or create a release through GitHub web interface.&#10;&#10;4. **GitHub Actions will automatically**:&#10;   - Build the release APK&#10;   - Sign it with your keystore&#10;   - Upload it to the GitHub release&#10;&#10;### Manual Release&#10;&#10;If you prefer manual releases:&#10;&#10;1. Build signed APK:&#10;   ```bash&#10;   ./gradlew assembleRelease&#10;   ```&#10;&#10;2. Find your APK in: `app/build/outputs/apk/release/`&#10;&#10;##  Security Notes&#10;&#10;- ✅ `local.properties` is in `.gitignore` (contains sensitive API keys)&#10;- ✅ Google Drive Client ID is loaded from environment variables&#10;- ✅ Release builds are properly signed and optimized&#10;- ⚠️  Never commit actual API keys to version control&#10;&#10;## ️ Architecture&#10;&#10;- **MVVM Pattern**: ViewModels manage UI state&#10;- **Repository Pattern**: Clean data layer abstraction&#10;- **Dependency Injection**: Hilt for clean dependencies&#10;- **Room Database**: Local caching and offline support&#10;- **Coroutines**: Asynchronous operations&#10;&#10;##  Tech Stack&#10;&#10;- **UI**: Jetpack Compose, Material Design 3&#10;- **Audio**: ExoPlayer, MediaSession&#10;- **Network**: Retrofit, OkHttp&#10;- **Database**: Room&#10;- **DI**: Hilt&#10;- **Image Loading**: Coil&#10;- **Authentication**: Google OAuth 2.0&#10;&#10;##  Contributing&#10;&#10;1. Fork the repository&#10;2. Create your feature branch&#10;3. Commit your changes&#10;4. Push to the branch&#10;5. Create a Pull Request&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the LICENSE file for details." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt.android)&#10;    alias(libs.plugins.kotlin.ksp)&#10;    alias(libs.plugins.kotlin.serialization)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.vinyleaf.musicplayer&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.vinyleaf.musicplayer&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        &#10;        // Google Drive API configuration&#10;        buildConfigField(&quot;String&quot;, &quot;GOOGLE_DRIVE_CLIENT_ID&quot;, &quot;\&quot;${project.findProperty(&quot;GOOGLE_DRIVE_CLIENT_ID&quot;) ?: &quot;&quot;}\&quot;&quot;)&#10;    }&#10;&#10;    signingConfigs {&#10;        create(&quot;release&quot;) {&#10;            storeFile = file(&quot;../keystore/release-keystore.jks&quot;)&#10;            storePassword = System.getenv(&quot;KEYSTORE_PASSWORD&quot;)&#10;            keyAlias = System.getenv(&quot;KEY_ALIAS&quot;)&#10;            keyPassword = System.getenv(&quot;KEY_PASSWORD&quot;)&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = true&#10;            isShrinkResources = true&#10;            signingConfig = signingConfigs.getByName(&quot;release&quot;)&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;&#10;            // Remove debug info and optimize&#10;            isDebuggable = false&#10;            isJniDebuggable = false&#10;            renderscriptDebuggable = false&#10;        }&#10;        debug {&#10;            isMinifyEnabled = false&#10;            isDebuggable = true&#10;            applicationIdSuffix = &quot;.debug&quot;&#10;            versionNameSuffix = &quot;-debug&quot;&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;            excludes += &quot;META-INF/INDEX.LIST&quot;&#10;            excludes += &quot;META-INF/DEPENDENCIES&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;    &#10;    // Compose BOM&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.material.icons.extended)&#10;    &#10;    // Media &amp; ExoPlayer&#10;    implementation(libs.androidx.media3.exoplayer)&#10;    implementation(libs.androidx.media3.ui)&#10;    implementation(libs.androidx.media3.session)&#10;    implementation(libs.androidx.media3.common)&#10;    &#10;    // Room Database&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // Networking&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.gson)&#10;    implementation(libs.okhttp3.logging.interceptor)&#10;    &#10;    // Google Drive API&#10;    implementation(libs.google.api.services.drive)&#10;    implementation(libs.google.auth.library.oauth2.http)&#10;    implementation(libs.google.http.client.gson)&#10;    &#10;    // Dependency Injection&#10;    implementation(libs.hilt.android)&#10;    implementation(libs.androidx.hilt.navigation.compose)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    // Image Loading&#10;    implementation(libs.coil.compose)&#10;    &#10;    // Permissions&#10;    implementation(libs.accompanist.permissions)&#10;    &#10;    // Serialization&#10;    implementation(libs.kotlinx.serialization.json)&#10;    &#10;    // Audio metadata extraction&#10;    // implementation(libs.jaudiotagger)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    testImplementation(libs.mockk)&#10;    testImplementation(libs.kotlinx.coroutines.test)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    &#10;    // Debug&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;&#10;    // Material Components&#10;    implementation(&quot;com.google.android.material:material:1.12.0&quot;)&#10;&#10;    // Google Auth &amp; Drive API&#10;    implementation(&quot;com.google.android.gms:play-services-auth:21.0.0&quot;)&#10;    implementation(&quot;com.google.api-client:google-api-client-android:1.33.2&quot;)&#10;    implementation(&quot;com.google.api-client:google-api-client-gson:1.33.2&quot;)&#10;    implementation(&quot;com.google.api-client:google-api-client:1.33.2&quot;)&#10;    implementation(&quot;com.google.oauth-client:google-oauth-client-jetty:1.34.1&quot;)&#10;    implementation(&quot;com.google.apis:google-api-services-drive:v3-rev20240701-2.0.0&quot;)&#10;    // AndroidX SplashScreen API (correct artifact)&#10;    implementation(&quot;androidx.core:core-splashscreen:1.0.0&quot;)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt.android)&#10;    alias(libs.plugins.kotlin.ksp)&#10;    alias(libs.plugins.kotlin.serialization)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.vinyleaf.musicplayer&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.vinyleaf.musicplayer&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        &#10;        // Google Drive API configuration&#10;        buildConfigField(&quot;String&quot;, &quot;GOOGLE_DRIVE_CLIENT_ID&quot;, &quot;\&quot;${project.findProperty(&quot;GOOGLE_DRIVE_CLIENT_ID&quot;) ?: &quot;&quot;}\&quot;&quot;)&#10;    }&#10;&#10;    signingConfigs {&#10;        create(&quot;release&quot;) {&#10;            storeFile = file(&quot;../keystore/release-keystore.jks&quot;)&#10;            storePassword = System.getenv(&quot;KEYSTORE_PASSWORD&quot;)&#10;            keyAlias = System.getenv(&quot;KEY_ALIAS&quot;)&#10;            keyPassword = System.getenv(&quot;KEY_PASSWORD&quot;)&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = true&#10;            isShrinkResources = true&#10;            signingConfig = signingConfigs.getByName(&quot;release&quot;)&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;&#10;            // Remove debug info and optimize&#10;            isDebuggable = false&#10;            isJniDebuggable = false&#10;        }&#10;        debug {&#10;            isMinifyEnabled = false&#10;            isDebuggable = true&#10;            applicationIdSuffix = &quot;.debug&quot;&#10;            versionNameSuffix = &quot;-debug&quot;&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;            excludes += &quot;META-INF/INDEX.LIST&quot;&#10;            excludes += &quot;META-INF/DEPENDENCIES&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;    &#10;    // Compose BOM&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.material.icons.extended)&#10;    &#10;    // Media &amp; ExoPlayer&#10;    implementation(libs.androidx.media3.exoplayer)&#10;    implementation(libs.androidx.media3.ui)&#10;    implementation(libs.androidx.media3.session)&#10;    implementation(libs.androidx.media3.common)&#10;    &#10;    // Room Database&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // Networking&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.gson)&#10;    implementation(libs.okhttp3.logging.interceptor)&#10;    &#10;    // Google Drive API&#10;    implementation(libs.google.api.services.drive)&#10;    implementation(libs.google.auth.library.oauth2.http)&#10;    implementation(libs.google.http.client.gson)&#10;    &#10;    // Dependency Injection&#10;    implementation(libs.hilt.android)&#10;    implementation(libs.androidx.hilt.navigation.compose)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    // Image Loading&#10;    implementation(libs.coil.compose)&#10;    &#10;    // Permissions&#10;    implementation(libs.accompanist.permissions)&#10;    &#10;    // Serialization&#10;    implementation(libs.kotlinx.serialization.json)&#10;    &#10;    // Audio metadata extraction&#10;    // implementation(libs.jaudiotagger)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    testImplementation(libs.mockk)&#10;    testImplementation(libs.kotlinx.coroutines.test)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    &#10;    // Debug&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;&#10;    // Material Components&#10;    implementation(&quot;com.google.android.material:material:1.12.0&quot;)&#10;&#10;    // Google Auth &amp; Drive API&#10;    implementation(&quot;com.google.android.gms:play-services-auth:21.0.0&quot;)&#10;    implementation(&quot;com.google.api-client:google-api-client-android:1.33.2&quot;)&#10;    implementation(&quot;com.google.api-client:google-api-client-gson:1.33.2&quot;)&#10;    implementation(&quot;com.google.api-client:google-api-client:1.33.2&quot;)&#10;    implementation(&quot;com.google.oauth-client:google-oauth-client-jetty:1.34.1&quot;)&#10;    implementation(&quot;com.google.apis:google-api-services-drive:v3-rev20240701-2.0.0&quot;)&#10;    // AndroidX SplashScreen API (correct artifact)&#10;    implementation(&quot;androidx.core:core-splashscreen:1.0.0&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_auth_dark.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_auth_dark.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:aapt=&quot;http://schemas.android.com/aapt&quot;&#10;    android:width=&quot;1080dp&quot;&#10;    android:height=&quot;1920dp&quot;&#10;    android:viewportWidth=&quot;1080&quot;&#10;    android:viewportHeight=&quot;1920&quot;&gt;&#10;&#10;    &lt;!-- Dark gradient background for night mode --&gt;&#10;    &lt;path android:pathData=&quot;M0,0h1080v1920H0z&quot;&gt;&#10;        &lt;aapt:attr name=&quot;android:fillColor&quot;&gt;&#10;            &lt;gradient&#10;                android:angle=&quot;135&quot;&#10;                android:startColor=&quot;#232526&quot;&#10;                android:centerColor=&quot;#414345&quot;&#10;                android:endColor=&quot;#0f0f23&quot;&#10;                android:type=&quot;linear&quot; /&gt;&#10;        &lt;/aapt:attr&gt;&#10;    &lt;/path&gt;&#10;&#10;    &lt;!-- Subtle overlay --&gt;&#10;    &lt;path android:pathData=&quot;M0,0h1080v960H0z&quot;&#10;        android:fillColor=&quot;#1ED760&quot;&#10;        android:fillAlpha=&quot;0.05&quot; /&gt;&#10;&#10;    &lt;!-- Music-themed decorative elements --&gt;&#10;    &lt;circle&#10;        android:cx=&quot;150&quot;&#10;        android:cy=&quot;200&quot;&#10;        android:r=&quot;80&quot;&#10;        android:fillColor=&quot;#1ED760&quot;&#10;        android:fillAlpha=&quot;0.1&quot; /&gt;&#10;&#10;    &lt;circle&#10;        android:cx=&quot;930&quot;&#10;        android:cy=&quot;500&quot;&#10;        android:r=&quot;60&quot;&#10;        android:fillColor=&quot;#6C63FF&quot;&#10;        android:fillAlpha=&quot;0.08&quot; /&gt;&#10;&#10;    &lt;circle&#10;        android:cx=&quot;250&quot;&#10;        android:cy=&quot;1100&quot;&#10;        android:r=&quot;90&quot;&#10;        android:fillColor=&quot;#FF6B6B&quot;&#10;        android:fillAlpha=&quot;0.06&quot; /&gt;&#10;&#10;    &lt;!-- Vinyl record inspired circles --&gt;&#10;    &lt;circle&#10;        android:cx=&quot;800&quot;&#10;        android:cy=&quot;1400&quot;&#10;        android:r=&quot;120&quot;&#10;        android:strokeColor=&quot;#1ED760&quot;&#10;        android:strokeAlpha=&quot;0.1&quot;&#10;        android:strokeWidth=&quot;2&quot;&#10;        android:fillColor=&quot;android:color/transparent&quot; /&gt;&#10;&#10;    &lt;circle&#10;        android:cx=&quot;800&quot;&#10;        android:cy=&quot;1400&quot;&#10;        android:r=&quot;80&quot;&#10;        android:strokeColor=&quot;#1ED760&quot;&#10;        android:strokeAlpha=&quot;0.08&quot;&#10;        android:strokeWidth=&quot;1&quot;&#10;        android:fillColor=&quot;android:color/transparent&quot; /&gt;&#10;&#10;    &lt;circle&#10;        android:cx=&quot;800&quot;&#10;        android:cy=&quot;1400&quot;&#10;        android:r=&quot;40&quot;&#10;        android:strokeColor=&quot;#1ED760&quot;&#10;        android:strokeAlpha=&quot;0.06&quot;&#10;        android:strokeWidth=&quot;1&quot;&#10;        android:fillColor=&quot;android:color/transparent&quot; /&gt;&#10;&#10;&lt;/vector&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:angle=&quot;135&quot;&#10;        android:startColor=&quot;#232526&quot;&#10;        android:centerColor=&quot;#414345&quot;&#10;        android:endColor=&quot;#0f0f23&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_auth_gradient.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_auth_gradient.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:aapt=&quot;http://schemas.android.com/aapt&quot;&#10;    android:width=&quot;1080dp&quot;&#10;    android:height=&quot;1920dp&quot;&#10;    android:viewportWidth=&quot;1080&quot;&#10;    android:viewportHeight=&quot;1920&quot;&gt;&#10;&#10;    &lt;!-- Main gradient background --&gt;&#10;    &lt;path android:pathData=&quot;M0,0h1080v1920H0z&quot;&gt;&#10;        &lt;aapt:attr name=&quot;android:fillColor&quot;&gt;&#10;            &lt;gradient&#10;                android:angle=&quot;135&quot;&#10;                android:startColor=&quot;#667eea&quot;&#10;                android:centerColor=&quot;#764ba2&quot;&#10;                android:endColor=&quot;#f093fb&quot;&#10;                android:type=&quot;linear&quot; /&gt;&#10;        &lt;/aapt:attr&gt;&#10;    &lt;/path&gt;&#10;&#10;    &lt;!-- Overlay patterns --&gt;&#10;    &lt;path android:pathData=&quot;M0,0h1080v960H0z&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.1&quot; /&gt;&#10;&#10;    &lt;!-- Decorative circles --&gt;&#10;    &lt;circle&#10;        android:cx=&quot;200&quot;&#10;        android:cy=&quot;300&quot;&#10;        android:r=&quot;150&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.08&quot; /&gt;&#10;&#10;    &lt;circle&#10;        android:cx=&quot;880&quot;&#10;        android:cy=&quot;600&quot;&#10;        android:r=&quot;100&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.05&quot; /&gt;&#10;&#10;    &lt;circle&#10;        android:cx=&quot;300&quot;&#10;        android:cy=&quot;1200&quot;&#10;        android:r=&quot;120&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.06&quot; /&gt;&#10;&#10;    &lt;circle&#10;        android:cx=&quot;800&quot;&#10;        android:cy=&quot;1500&quot;&#10;        android:r=&quot;80&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.04&quot; /&gt;&#10;&#10;    &lt;!-- Music wave pattern --&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M0,800 Q270,750 540,800 T1080,800&quot;&#10;        android:strokeColor=&quot;#FFFFFF&quot;&#10;        android:strokeAlpha=&quot;0.1&quot;&#10;        android:strokeWidth=&quot;2&quot;&#10;        android:fillColor=&quot;android:color/transparent&quot; /&gt;&#10;&#10;    &lt;path&#10;        android:pathData=&quot;M0,820 Q270,770 540,820 T1080,820&quot;&#10;        android:strokeColor=&quot;#FFFFFF&quot;&#10;        android:strokeAlpha=&quot;0.08&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:fillColor=&quot;android:color/transparent&quot; /&gt;&#10;&#10;&lt;/vector&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#13;&#10;    &lt;gradient&#13;&#10;        android:angle=&quot;135&quot;&#13;&#10;        android:startColor=&quot;#667eea&quot;&#13;&#10;        android:centerColor=&quot;#764ba2&quot;&#13;&#10;        android:endColor=&quot;#f093fb&quot;&#13;&#10;        android:type=&quot;linear&quot; /&gt;&#13;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_card_gradient.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_card_gradient.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:angle=&quot;135&quot;&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_home_gradient.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_home_gradient.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:angle=&quot;180&quot;&#10;        android:startColor=&quot;#1DB954&quot;&#10;        android:centerColor=&quot;#1ED760&quot;&#10;        android:endColor=&quot;#26C6DA&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_home_simple.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_home_simple.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:angle=&quot;180&quot;&#10;        android:startColor=&quot;#1DB954&quot;&#10;        android:centerColor=&quot;#1ED760&quot;&#10;        android:endColor=&quot;#26C6DA&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/local.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/local.properties" />
              <option name="originalContent" value="## This file must *NOT* be checked into Version Control Systems,&#10;# as it contains information specific to your local configuration.&#10;#&#10;# Location of the SDK. This is only used by Gradle.&#10;# For customization when using a Version Control System, please read the&#10;# header note.&#10;#Thu Jul 31 09:40:18 IST 2025&#10;sdk.dir=C\:\\Users\\lmfph\\AppData\\Local\\Android\\Sdk&#10;&#10;# Google Drive Client ID - KEEP THIS SECURE!&#10;# Replace with your actual client ID from Google Cloud Console&#10;# Format: 123456789012-abcdefghijklmnopqrstuvwxyz123456.apps.googleusercontent.com&#10;GOOGLE_DRIVE_CLIENT_ID=your_client_id_here&#10;" />
              <option name="updatedContent" value="## This file must *NOT* be checked into Version Control Systems,&#13;&#10;# as it contains information specific to your local configuration.&#13;&#10;#&#13;&#10;# Location of the SDK. This is only used by Gradle.&#13;&#10;# For customization when using a Version Control System, please read the&#13;&#10;# header note.&#13;&#10;#Thu Jul 31 09:40:18 IST 2025&#13;&#10;sdk.dir=C\:\\Users\\lmfph\\AppData\\Local\\Android\\Sdk&#13;&#10;&#13;&#10;# Google Drive Client ID - KEEP THIS SECURE!&#13;&#10;# Replace with your actual client ID from Google Cloud Console&#13;&#10;# Format: 123456789012-abcdefghijklmnopqrstuvwxyz123456.apps.googleusercontent.com&#13;&#10;# DO NOT COMMIT YOUR REAL CLIENT ID TO VERSION CONTROL!&#13;&#10;GOOGLE_DRIVE_CLIENT_ID=your_google_drive_client_id_here" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/setup-release.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/setup-release.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;# Vinyleaf Release Setup Script&#10;# This script helps you set up everything needed for GitHub releases&#10;&#10;echo &quot; Vinyleaf Release Setup&quot;&#10;echo &quot;========================&quot;&#10;&#10;# Create keystore directory&#10;mkdir -p keystore&#10;&#10;echo &quot; Creating release keystore...&quot;&#10;echo &quot;Please provide the following information for your app signing key:&quot;&#10;read -p &quot;Enter your name: &quot; dev_name&#10;read -p &quot;Enter your organization: &quot; organization&#10;read -p &quot;Enter your country code (e.g., US, IN): &quot; country&#10;&#10;# Generate keystore&#10;keytool -genkey -v \&#10;    -keystore keystore/release-keystore.jks \&#10;    -keyalg RSA \&#10;    -keysize 2048 \&#10;    -validity 10000 \&#10;    -alias vinyleaf \&#10;    -dname &quot;CN=$dev_name, O=$organization, C=$country&quot;&#10;&#10;echo &quot;&quot;&#10;echo &quot;✅ Keystore created successfully!&quot;&#10;echo &quot;&quot;&#10;echo &quot; Next steps for GitHub Actions:&quot;&#10;echo &quot;1. Go to your GitHub repository settings&quot;&#10;echo &quot;2. Navigate to Secrets and Variables &gt; Actions&quot;&#10;echo &quot;3. Add these secrets:&quot;&#10;echo &quot;   - SIGNING_KEY: (base64 encoded keystore file)&quot;&#10;echo &quot;   - ALIAS: vinyleaf&quot;&#10;echo &quot;   - KEY_STORE_PASSWORD: (the password you just entered)&quot;&#10;echo &quot;   - KEY_PASSWORD: (the password you just entered)&quot;&#10;echo &quot;&quot;&#10;echo &quot; To get the base64 encoded keystore:&quot;&#10;echo &quot;   Linux/Mac: base64 -i keystore/release-keystore.jks&quot;&#10;echo &quot;   Windows: certutil -encode keystore/release-keystore.jks keystore.txt&quot;&#10;echo &quot;&quot;&#10;echo &quot; After setting up secrets, create a release by:&quot;&#10;echo &quot;   git tag v1.0.0&quot;&#10;echo &quot;   git push origin v1.0.0&quot;&#10;echo &quot;&quot;&#10;echo &quot;⚠️  IMPORTANT: Never commit the keystore file to git!&quot;&#10;echo &quot;   It's already excluded in .gitignore&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test-build.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test-build.bat" />
              <option name="updatedContent" value="@echo off&#10;echo Testing Vinyleaf project build...&#10;cd /d &quot;C:\Users\lmfph\Downloads\Vinyleaf&quot;&#10;gradlew.bat assembleDebug&#10;if %ERRORLEVEL% EQU 0 (&#10;    echo Build successful!&#10;) else (&#10;    echo Build failed with error code %ERRORLEVEL%&#10;)&#10;pause" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>